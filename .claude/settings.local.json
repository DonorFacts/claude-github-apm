{
  "permissions": {
    "allow": [
      "Bash(git fetch:*)",
      "Bash(gh pr create:*)",
      "Bash(pnpm tsc:*)",
      "Bash(pnpm exec tsc:*)",
      "Bash(pnpm list:*)",
      "Bash(npx tsc:*)",
      "Bash(git rm:*)",
      "Bash(git add:*)",
      "Bash(./test-handover-init.sh:*)",
      "Bash(./src/scripts/**/*.sh:*)",
      "Bash(./src/scripts/session/update-terminal-title.sh:*)",
      "Bash(./src/scripts/session/*.sh:*)",
      "Bash(./src/scripts/**/*.sh)",
      "Bash(/Users/jakedetels/www/claude-github-apm/worktrees/feature-draft-git-worktree-docs/src/scripts/session/update-terminal-title.sh \"üîÑ PE: Updating Prompt\")",
      "Bash(./src/scripts/session/update-terminal-title.sh:*)",
      "Bash(./src/scripts/session/update-terminal-title.sh:*)",
      "Bash(code:*)",
      "WebFetch(domain:claudelog.com)",
      "Bash(./test-create-flow.sh:*)",
      "WebFetch(domain:raw.githubusercontent.com)",
      "Bash(git reset:*)",
      "WebFetch(domain:www.whois.com)",
      "WebFetch(domain:www.godaddy.com)",
      "Bash(./scripts/git/generate-pr-body.sh:*)",
      "Bash(git merge:*)",
      "Bash(claude config list)",
      "Bash(/Users/jakedetels/.nvm/versions/node/v20.17.0/bin/claude config list)",
      "Bash(/Users/jakedetels/.nvm/versions/node/v20.17.0/bin/claude config --help)",
      "Bash(/Users/jakedetels/.nvm/versions/node/v20.17.0/bin/claude mcp --help)",
      "Bash(/Users/jakedetels/.nvm/versions/node/v20.17.0/bin/claude mcp list)",
      "Bash(/Users/jakedetels/.nvm/versions/node/v20.17.0/bin/claude config get ignorePatterns)",
      "Bash(git stash:*)",
      "Bash(pnpm build:*)",
      "Bash(./src/scripts/git/generate-pr-body.sh:*)",
      "Bash(./src/scripts/git/pr-create.sh:*)",
      "Bash(gh pr list:*)",
      "Bash(git -C /Users/jakedetels/www/claude-github-apm/main status)",
      "Bash(git -C /Users/jakedetels/www/claude-github-apm/main worktree list)",
      "Bash(cat .git)",
      "Bash(gh issue create:*)",
      "Bash(claude-sandbox:*)",
      "Bash(./src/scripts/git/worktree-create.sh --help)",
      "Bash(./src/scripts/git/worktree-create.sh:*)",
      "Bash(if [ -f /.dockerenv ])",
      "Bash([ -n \"$APM_CONTAINERIZED\" ])",
      "Bash(then)",
      "Bash(export APM_CONTAINERIZED=true)",
      "Bash(else)",
      "Bash(export APM_CONTAINERIZED=false)",
      "Bash(fi)",
      "Bash(APM_MEMORY_BASE=\"apm/agents\")",
      "Bash(git branch:*)",
      "Bash([ -n \"$REMOTE_CONTAINERS\" ])",
      "WebFetch(domain:code.visualstudio.com)",
      "WebFetch(domain:stackoverflow.com)",
      "Bash(bash:*)",
      "Bash(src/scripts/git/worktree-create.sh)",
      "Bash(docker build:*)",
      "Bash(src/docker/claude-container/claude-wrapper.sh:*)",
      "Bash(cat:*)",
      "Bash(# Let's see what the git state is in the test-docker-integration directory\nls ../worktrees/test-docker-integration/.git 2>/dev/null || echo \"No .git file found\")",
      "Bash(# Clean up test worktrees first\ngit worktree remove ../worktrees/test-docker-integration 2>/dev/null || echo \"Worktree not found in git\"\nrm -rf ../worktrees/test-docker-integration 2>/dev/null || echo \"Directory not found\"\ngit branch -D test-docker-integration 2>/dev/null || echo \"Branch not found\")",
      "Bash(# First fix the GitHub issue creation - check what flags are actually available\ngh issue create --help | grep -A 5 -B 5 json)",
      "Bash(gh:*)",
      "Bash(# Copy the current changes to a patch that can be applied to main\ngit format-patch HEAD~1 --stdout > /tmp/script-fixes.patch\necho \"Created patch at /tmp/script-fixes.patch\")",
      "Bash(# Create a minimal test worktree manually\nmkdir -p ../worktrees/test-docker-only\necho \"Testing Docker setup in isolation...\"\n\n# Test just the Docker setup function \ncd ../worktrees/test-docker-only\nmkdir -p .local/bin\n\n# Simulate the script's Docker setup\nscript_dir=\"/Users/jakedetels/www/claude-github-apm/worktrees/feature-draft-git-worktree-docs/src/scripts/git\"\ndocker_wrapper=\"$script_dir/../../docker/claude-container/claude-wrapper.sh\"\n\necho \"Docker wrapper exists: $([ -f \"$docker_wrapper\" ] && echo \"YES\" || echo \"NO\")\"\n\n# Create the claude wrapper\ncat > .local/bin/claude << 'EOF'\n#!/bin/bash\n# Auto-generated Claude wrapper for containerized execution\n# This script transparently runs Claude in a secure Docker container\n\nSCRIPT_DIR=\"$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\" && pwd)\"\nPROJECT_ROOT=\"$(cd \"$SCRIPT_DIR/../..\" && pwd)\"\nDOCKER_WRAPPER=\"$PROJECT_ROOT/src/docker/claude-container/claude-wrapper.sh\"\n\nif [ -f \"$DOCKER_WRAPPER\" ]; then\n    exec \"$DOCKER_WRAPPER\" \"$@\"\nelse\n    # Fallback to system claude if wrapper not found\n    exec claude \"$@\"\nfi\nEOF\n\nchmod +x .local/bin/claude\n\n# Create .envrc\ncat > .envrc << 'EOF'\n# APM Worktree Environment\n# Automatically adds .local/bin to PATH for containerized claude\nexport PATH=\"$PWD/.local/bin:$PATH\"\nEOF\n\necho \"‚úÖ Docker setup test completed\"\necho \"Files created:\"\nls -la .local/bin/claude .envrc)",
      "Bash(# Test the wrapper script we just created\ncd ../worktrees/test-docker-only\nexport PATH=\"$PWD/.local/bin:$PATH\"\n\n# Test path resolution in the wrapper\nSCRIPT_DIR=\"$(cd \"$(dirname \".local/bin/claude\")\" && pwd)\"\nPROJECT_ROOT=\"$(cd \"$SCRIPT_DIR/../..\" && pwd)\"\nDOCKER_WRAPPER=\"$PROJECT_ROOT/src/docker/claude-container/claude-wrapper.sh\"\n\necho \"Testing wrapper path resolution:\"\necho \"SCRIPT_DIR: $SCRIPT_DIR\"  \necho \"PROJECT_ROOT: $PROJECT_ROOT\"\necho \"DOCKER_WRAPPER: $DOCKER_WRAPPER\"\necho \"Docker wrapper exists: $([ -f \"$DOCKER_WRAPPER\" ] && echo \"YES\" || echo \"NO\")\")",
      "Bash(# Test the fixed wrapper creation\ncd ../worktrees/test-docker-only\n\n# Simulate the fixed wrapper creation\nscript_dir=\"/Users/jakedetels/www/claude-github-apm/worktrees/feature-draft-git-worktree-docs/src/scripts/git\"  \ndocker_wrapper=\"$script_dir/../../docker/claude-container/claude-wrapper.sh\"\n\ncat > .local/bin/claude << EOF\n#!/bin/bash\n# Auto-generated Claude wrapper for containerized execution\n# This script transparently runs Claude in a secure Docker container\n\n# Use absolute path to Docker wrapper (determined at creation time)\nDOCKER_WRAPPER=\"$docker_wrapper\"\n\nif [ -f \"\\$DOCKER_WRAPPER\" ]; then\n    exec \"\\$DOCKER_WRAPPER\" \"\\$@\"\nelse\n    # Fallback to system claude if wrapper not found\n    exec claude \"\\$@\"\nfi\nEOF\n\nchmod +x .local/bin/claude\n\necho \"Testing fixed wrapper:\"\ncat .local/bin/claude | grep DOCKER_WRAPPER\necho \"\"\necho \"Docker wrapper path in file: $(cat .local/bin/claude | grep 'DOCKER_WRAPPER=' | cut -d'\"' -f2)\"\necho \"Docker wrapper exists: $([ -f \"$docker_wrapper\" ] && echo \"YES\" || echo \"NO\")\")",
      "Bash(# Test the actual Docker wrapper functionality\ncd ../worktrees/test-docker-only\nexport PATH=\"$PWD/.local/bin:$PATH\"\n\n# Set debug mode to see what happens\nexport APM_DEBUG=true\n\n# Test the claude wrapper (should use Docker if available)\necho \"Testing claude wrapper with --help:\"\ntimeout 10 claude --help 2>&1 | head -10)",
      "Bash(# Clean up the polluted test worktree\ngit worktree remove ../worktrees/test-validation 2>/dev/null || echo \"Worktree already removed\"\ngit branch -D test-validation 2>/dev/null || echo \"Branch already deleted\"\nrm -rf \"../worktrees/test-validation\" 2>/dev/null || echo \"Directory already removed\"\n\n# Also clean up any weird polluted directories\nls ../worktrees/ | grep -E \"\\[|main\" | head -3)",
      "Bash(then echo \"üê≥ Container environment detected\")",
      "Bash(else echo \"üíª Host environment detected\")",
      "Bash(export PATH=\"$PWD/.local/bin:$PATH\")",
      "Bash(claude --version)",
      "Bash(rg:*)",
      "Bash(docker run:*)",
      "Bash(source:*)",
      "WebFetch(domain:support.anthropic.com)",
      "Bash(./workspace/.local/bin/say-from-container.sh:*)",
      "Bash(/workspace/.local/bin/say-from-container.sh:*)",
      "Bash(git restore:*)",
      "WebFetch(domain:docs.github.com)",
      "Bash(docker:*)",
      "Bash(pnpm container:status:*)",
      "Bash(pnpm tsx:*)",
      "Bash(./src/scripts/docker/apm-container.ts exec:*)",
      "Bash(/usr/local/bin/gh:*)",
      "Bash(command -v:*)",
      "Bash(brew list:*)",
      "Bash(/opt/homebrew/bin/gh --help)",
      "Bash(pnpm container:stop:*)",
      "Bash(pnpm:*)",
      "Bash(/opt/homebrew/bin/gh help)",
      "Bash(/Users/jakedetels/www/claude-github-apm/worktrees/feature-draft-git-worktree-docs/.local/bin/Notify_Jake)",
      "Bash(command Notify_Jake)",
      "Bash(./.local/bin/claude-container:*)",
      "Bash(/workspace/.local/bin/Notify_Jake:*)",
      "Bash(/workspace/.local/bin/Notify_Jake:*)",
      "Bash(./.local/bin/Notify_Jake:*)"
    ],
    "deny": []
  }
}