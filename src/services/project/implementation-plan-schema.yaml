# Implementation Plan Schema Documentation
# This schema is designed to minimize GitHub API calls while preserving all plan information

# Schema Version
version: "1.0"

# Project Metadata
project:
  name: string                # Repository name
  description: string        # Project goal/description
  repository: 
    owner: string           # GitHub org/user
    name: string            # Repository name
  
# Issue Type Mapping
# Maps plan types to GitHub custom issue type IDs
issue_types:
  phase: string             # GitHub issue type ID for Phase
  project: string           # GitHub issue type ID for Project  
  epic: string              # GitHub issue type ID for Epic
  feature: string           # GitHub issue type ID for Feature
  story: string             # GitHub issue type ID for Story
  task: string              # GitHub issue type ID for Task
  bug: string               # GitHub issue type ID for Bug

# Plan Items (Flat structure for efficient processing)
# Each item has a unique ID for internal reference
items:
  - id: string              # Unique identifier (e.g., "phase-1", "epic-1-1")
    type: enum              # One of: phase, project, epic, feature, story, task, bug
    title: string           # Issue title (without type prefix)
    description: string     # Full markdown description for issue body
    parent_id: string?      # Reference to parent item ID (null for top-level)
    assignee: string?       # GitHub username for assignment
    labels: string[]?       # Array of label names
    issue_number: number?   # GitHub issue number (populated after creation)
    children_ids: string[]? # Array of child item IDs (for validation)
    metadata:               # Additional fields
      agent: string?        # Assigned agent name
      priority: enum?       # high, medium, low
      estimate: string?     # Time estimate
      acceptance_criteria: string[]?  # List of acceptance criteria
      guidance: string?     # Implementation guidance notes

# Execution Plan
# Optimized order for API calls
execution:
  # Phase 1: Create all issues in batches by level
  create_order:           
    - level: 1            # Top-level items (phases)
      items: string[]     # Array of item IDs to create
    - level: 2            # Second level (projects, epics under phases)
      items: string[]
    - level: 3            # Third level (features, tasks under epics)
      items: string[]
    - level: 4            # Fourth level (sub-tasks)
      items: string[]
      
  # Phase 2: Create relationships in bulk
  # Group by parent to minimize API calls
  relationships:
    - parent_issue: number    # Parent issue number
      child_issues: number[]  # Array of child issue numbers