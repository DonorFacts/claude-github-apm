version: "1.0"
generated: "2025-06-19"

project:
  name: "Claude GitHub APM"
  description: "Transform the original APM framework into a GitHub-native, enterprise-ready system with CLI capabilities, full TypeScript implementation, and seamless scaling from solo developers to enterprise teams"
  repository:
    owner: "jakedetels"
    name: "claude-github-apm"

issue_types:
  phase: "MDT_Phase"
  project: "MDT_Project"
  epic: "MDT_Epic"
  feature: "MDT_Feature"
  story: "MDT_Story"
  task: "MDT_Task"
  bug: "MDT_Bug"
  doc: "MDT_Doc"

items:
  # Phase 1: TypeScript Foundation & Core Infrastructure
  - id: "phase-1"
    type: "phase"
    title: "TypeScript Foundation & Core Infrastructure"
    description: "Agent Group Alpha (Agent_TypeScript_Lead, Agent_Test_Engineer)"
    parent_id: null
    children_ids: ["epic-1-1", "epic-1-2", "epic-1-3", "feature-1-4"]
    issue_number: 2

  # Epic 1.1 - TypeScript Migration Setup
  - id: "epic-1-1"
    type: "epic"
    title: "Agent_TypeScript_Lead: TypeScript Migration Setup"
    description: "Convert the existing JavaScript codebase to strict TypeScript with proper typing and structure."
    parent_id: "phase-1"
    children_ids: ["task-1-1-1", "task-1-1-2", "story-1-1-3", "task-1-1-4"]
    issue_number: 3

  - id: "task-1-1-1"
    type: "task"
    title: "Set up TypeScript configuration and build system"
    description: |
      - Create `tsconfig.json` with strict mode enabled
      - Configure path aliases for clean imports
      - Set up build scripts for development and production
      - Configure source maps for debugging
    parent_id: "epic-1-1"
    children_ids: []
    issue_number: 7

  - id: "task-1-1-2"
    type: "task"
    title: "Migrate lib/create-command-files.js to TypeScript"
    description: |
      - Define interfaces for PromptBuilder configuration
      - Type all methods and parameters strictly
      - Handle fs-extra types (install @types/fs-extra)
      - Ensure backward compatibility with existing functionality
    parent_id: "epic-1-1"
    children_ids: []
    issue_number: 4

  - id: "story-1-1-3"
    type: "story"
    title: "Migrate all shell scripts to TypeScript"
    description: |
      - Create TypeScript equivalents using child_process or execa
      - Implement proper error handling and typing
      - Add progress indicators for long-running operations
      - Maintain script functionality while improving maintainability
    parent_id: "epic-1-1"
    children_ids: []
    issue_number: 5

  - id: "task-1-1-4"
    type: "task"
    title: "Set up ESLint and Prettier for code quality"
    description: |
      - Configure ESLint with TypeScript plugin
      - Set up Prettier with team-standard formatting
      - Add pre-commit hooks using husky
      - Configure VS Code settings for consistency
    parent_id: "epic-1-1"
    children_ids: []
    issue_number: 6

  # Epic 1.2 - Testing Infrastructure Setup
  - id: "epic-1-2"
    type: "epic"
    title: "Agent_Test_Engineer: Testing Infrastructure Setup"
    description: "Establish comprehensive testing framework following TDD principles."
    parent_id: "phase-1"
    children_ids: ["task-1-2-1", "task-1-2-2", "task-1-2-3", "task-1-2-4"]

  - id: "task-1-2-1"
    type: "task"
    title: "Set up Jest with TypeScript support"
    description: |
      - Configure Jest for TypeScript transpilation
      - Set up coverage reporting thresholds (aim for 80%+)
      - Configure test environments for Node.js
      - Add test scripts to package.json
    parent_id: "epic-1-2"
    children_ids: []

  - id: "task-1-2-2"
    type: "task"
    title: "Create test structure and conventions"
    description: |
      - Establish __tests__ directories alongside source files
      - Define naming conventions (*.test.ts, *.spec.ts)
      - Create test utilities and helpers
      - Document testing best practices in CONTRIBUTING.md
    parent_id: "epic-1-2"
    children_ids: []

  - id: "task-1-2-3"
    type: "task"
    title: "Write initial test suite for create-command-files"
    description: |
      - Test PromptBuilder class initialization
      - Test file transformation logic
      - Test error handling scenarios
      - Test GitHub context injection
    parent_id: "epic-1-2"
    children_ids: []

  - id: "task-1-2-4"
    type: "task"
    title: "Set up continuous integration testing"
    description: |
      - Configure GitHub Actions for test runs
      - Add test status badges to README
      - Set up automated test reports in PRs
      - Configure test caching for faster runs
    parent_id: "epic-1-2"
    children_ids: []

  # Epic 1.3 - Build System for NPM Publishing
  - id: "epic-1-3"
    type: "epic"
    title: "Agent_TypeScript_Lead: Build System for NPM Publishing"
    description: "Create robust build system for npm/pnpm package distribution."
    parent_id: "phase-1"
    children_ids: ["task-1-3-1", "task-1-3-2", "task-1-3-3", "task-1-3-4"]

  - id: "task-1-3-1"
    type: "task"
    title: "Configure package.json for publishing"
    description: |
      - Set proper package name (@anthropic/claude-github-apm)
      - Define entry points and exports
      - Configure files array for published content
      - Add keywords and metadata for discoverability
    parent_id: "epic-1-3"
    children_ids: []

  - id: "task-1-3-2"
    type: "task"
    title: "Create build pipeline for distribution"
    description: |
      - Set up TypeScript compilation to dist/
      - Bundle type definitions
      - Create separate builds for CommonJS and ESM
      - Implement tree-shaking optimizations
    parent_id: "epic-1-3"
    children_ids: []

  - id: "task-1-3-3"
    type: "task"
    title: "Implement post-install script system"
    description: |
      - Create postinstall.js for consuming repos
      - Generate .claude/commands/apm/ structure
      - Copy transformed prompts to consumer's project
      - Handle cross-platform compatibility
    parent_id: "epic-1-3"
    children_ids: []

  - id: "task-1-3-4"
    type: "task"
    title: "Set up local testing workflow"
    description: |
      - Create npm link setup for development
      - Add example consumer project for testing
      - Document local development workflow
      - Create scripts for simulating installation
    parent_id: "epic-1-3"
    children_ids: []

  # Feature 1.4 - CLAUDE.md Integration System
  - id: "feature-1-4"
    type: "feature"
    title: "Agent_TypeScript_Lead: CLAUDE.md Integration System"
    description: "Automatically update consuming repository's CLAUDE.md with APM framework usage information."
    parent_id: "phase-1"
    children_ids: ["task-1-4-1", "doc-1-4-2", "task-1-4-3", "task-1-4-4"]

  - id: "task-1-4-1"
    type: "task"
    title: "Design CLAUDE.md detection and update system"
    description: |
      - Search for CLAUDE.md in common locations (root, .claude/, docs/)
      - Create fallback to create CLAUDE.md if not found
      - Design non-destructive append strategy
      - Plan section markers for updates
    parent_id: "feature-1-4"
    children_ids: []

  - id: "doc-1-4-2"
    type: "doc"
    title: "Create CLAUDE.md content templates"
    description: |
      - Write APM framework introduction section
      - Document available commands and workflows
      - Add quick reference for agents
      - Include troubleshooting tips
    parent_id: "feature-1-4"
    children_ids: []

  - id: "task-1-4-3"
    type: "task"
    title: "Implement update mechanism"
    description: |
      - Build file detection algorithm
      - Create content injection system
      - Guidance: Use markers like <!-- APM-START --> to manage sections
      - Implement rollback capability
      - Add update tracking to prevent duplicates
    parent_id: "feature-1-4"
    children_ids: []

  - id: "task-1-4-4"
    type: "task"
    title: "Integrate with post-install process"
    description: |
      - Add to postinstall.js execution flow
      - Create update confirmation prompts
      - Log changes for transparency
      - Handle permission errors gracefully
    parent_id: "feature-1-4"
    children_ids: []

  # Phase 2: Prompt Transformation System Enhancement
  - id: "phase-2"
    type: "phase"
    title: "Prompt Transformation System Enhancement"
    description: "Agent Group Beta (Agent_Prompt_Engineer, Agent_GitHub_Integration, Agent_Build_Optimizer)"
    parent_id: null
    children_ids: ["epic-2-1", "epic-2-2", "feature-2-4", "epic-2-3"]

  # Epic 2.1 - Core APM Prompt Post-Processors
  - id: "epic-2-1"
    type: "epic"
    title: "Agent_Prompt_Engineer: Core APM Prompt Post-Processors"
    description: "Create post-processing templates for all essential APM prompts."
    parent_id: "phase-2"
    children_ids: ["task-2-1-1", "task-2-1-2", "task-2-1-3", "task-2-1-4"]

  - id: "task-2-1-1"
    type: "task"
    title: "Analyze all prompts in src/prompts/original/"
    description: |
      - Catalog all APM prompts requiring transformation
      - Guidance: Focus on Manager, Implementation, and specialized agent prompts
      - Identify common patterns for reuse
      - Prioritize based on usage frequency
      - Document transformation requirements
    parent_id: "epic-2-1"
    children_ids: []

  - id: "task-2-1-2"
    type: "task"
    title: "Create Manager Agent post-processors"
    description: |
      - Create post-processor for 01_Initiation_Prompt.md
        Guidance: Inject GitHub project setup, issue creation workflows
      - Create post-processor for 02_Codebase_Guidance.md
        Guidance: Add GitHub repository analysis commands
      - Create post-processor for Implementation_Plan_Guide.md
        Guidance: Include GitHub issue hierarchy mapping
      - Test transformations with example inputs
    parent_id: "epic-2-1"
    children_ids: []

  - id: "task-2-1-3"
    type: "task"
    title: "Create Implementation Agent post-processors"
    description: |
      - Create post-processor for Implementation_Agent_Onboarding.md
        Guidance: Add GitHub workflow integration, commit guidelines
      - Create task assignment prompt transformations
      - Add GitHub context awareness to all prompts
      - Include CLI command references
    parent_id: "epic-2-1"
    children_ids: []

  - id: "task-2-1-4"
    type: "task"
    title: "Create specialized agent post-processors"
    description: |
      - Transform Debugger Agent prompts
      - Transform Reviewer Agent prompts
      - Create new Scrum Master transformations
      - Add Prompt Engineer enhancements
    parent_id: "epic-2-1"
    children_ids: []

  # Epic 2.2 - GitHub Context Injection System
  - id: "epic-2-2"
    type: "epic"
    title: "Agent_GitHub_Integration: GitHub Context Injection System"
    description: "Build system to inject GitHub-specific context into all prompts."
    parent_id: "phase-2"
    children_ids: ["task-2-2-1", "task-2-2-2", "task-2-2-3", "task-2-2-4"]

  - id: "task-2-2-1"
    type: "task"
    title: "Design GitHub context detection system"
    description: |
      - Detect repository configuration
      - Identify custom issue types
      - Determine project board setup
      - Assess team size and structure
    parent_id: "epic-2-2"
    children_ids: []

  - id: "task-2-2-2"
    type: "task"
    title: "Implement context injection engine"
    description: |
      - Create GitHubContextProvider class
      - Build template variable system
      - Implement conditional content blocks
      - Add context validation
    parent_id: "epic-2-2"
    children_ids: []

  - id: "task-2-2-3"
    type: "task"
    title: "Create GitHub command templates"
    description: |
      - Build reusable gh CLI command snippets
      - Create issue creation templates
      - Add PR workflow commands
      - Include project board operations
    parent_id: "epic-2-2"
    children_ids: []

  - id: "task-2-2-4"
    type: "task"
    title: "Integrate with build system"
    description: |
      - Connect context provider to PromptBuilder
      - Add configuration options
      - Implement caching for performance
      - Create debug mode for troubleshooting
    parent_id: "epic-2-2"
    children_ids: []

  # Feature 2.4 - Markdown to XML Reference Resolution System
  - id: "feature-2-4"
    type: "feature"
    title: "Agent_Build_Optimizer: Markdown to XML Reference Resolution System"
    description: "Pre-compile markdown files with resolved imports/references into XML format for runtime efficiency."
    parent_id: "phase-2"
    children_ids: ["task-2-4-1", "task-2-4-2", "task-2-4-3", "task-2-4-4"]

  - id: "task-2-4-1"
    type: "task"
    title: "Design reference resolution system"
    description: |
      - Define import syntax patterns (@import, [[file]], etc.)
      - Create recursive file resolution algorithm
      - Handle circular reference detection
      - Design XML schema for output format
    parent_id: "feature-2-4"
    children_ids: []

  - id: "task-2-4-2"
    type: "task"
    title: "Implement markdown parser with reference support"
    description: |
      - Build AST parser for markdown files
      - Identify and extract reference patterns
      - Implement file path resolution logic
      - Add support for partial file includes
    parent_id: "feature-2-4"
    children_ids: []

  - id: "task-2-4-3"
    type: "task"
    title: "Create XML generation engine"
    description: |
      - Design XML structure with metadata
        Guidance: Include source file paths, resolution timestamps
      - Implement content inlining with proper escaping
      - Add reference tracking for debugging
      - Generate source maps for error reporting
    parent_id: "feature-2-4"
    children_ids: []

  - id: "task-2-4-4"
    type: "task"
    title: "Integrate with build pipeline"
    description: |
      - Add XML generation to build:prompts command
      - Create separate xml output directory
      - Implement incremental builds for efficiency
      - Add validation and error reporting
    parent_id: "feature-2-4"
    children_ids: []

  # Epic 2.3 (Complex) - Prompt Validation System
  - id: "epic-2-3"
    type: "epic"
    title: "Agent_Prompt_Engineer & Agent_Test_Engineer: Prompt Validation System"
    description: "Ensure all transformed prompts maintain quality and correctness."
    parent_id: "phase-2"
    children_ids: ["task-2-3-1", "task-2-3-2", "task-2-3-3", "task-2-3-4"]
    metadata:
      complex: true
      agents: ["Agent_Prompt_Engineer", "Agent_Test_Engineer"]

  - id: "task-2-3-1"
    type: "task"
    title: "(Agent_Prompt_Engineer) Define prompt quality metrics"
    description: |
      - Establish clarity standards
      - Define completeness criteria
      - Set context preservation rules
      - Document validation requirements
    parent_id: "epic-2-3"
    children_ids: []
    metadata:
      agent: "Agent_Prompt_Engineer"

  - id: "task-2-3-2"
    type: "task"
    title: "(Agent_Test_Engineer) Implement automated validation"
    description: |
      - Create prompt parsing utilities
      - Build validation test suite
      - Implement regression testing
      - Add performance benchmarks
    parent_id: "epic-2-3"
    children_ids: []
    metadata:
      agent: "Agent_Test_Engineer"

  - id: "task-2-3-3"
    type: "task"
    title: "(Agent_Prompt_Engineer) Create prompt testing scenarios"
    description: |
      - Design test cases for each prompt type
      - Create mock GitHub contexts
      - Define expected transformations
      - Document edge cases
    parent_id: "epic-2-3"
    children_ids: []
    metadata:
      agent: "Agent_Prompt_Engineer"

  - id: "task-2-3-4"
    type: "task"
    title: "(Agent_Test_Engineer) Build validation reporting"
    description: |
      - Create validation reports
      - Add CI/CD integration
      - Implement prompt diff visualization
      - Generate quality metrics dashboard
    parent_id: "epic-2-3"
    children_ids: []
    metadata:
      agent: "Agent_Test_Engineer"

  # Phase 3: GitHub Integration & Automation
  - id: "phase-3"
    type: "phase"
    title: "GitHub Integration & Automation"
    description: "Agent Group Gamma (Agent_GitHub_Automation, Agent_Integration_Specialist)"
    parent_id: null
    children_ids: ["epic-3-1", "feature-3-2", "epic-3-3"]

  # Epic 3.1 - TypeScript GitHub Automation Scripts
  - id: "epic-3-1"
    type: "epic"
    title: "Agent_GitHub_Automation: TypeScript GitHub Automation Scripts"
    description: "Replace shell scripts with robust TypeScript implementations."
    parent_id: "phase-3"
    children_ids: ["task-3-1-1", "story-3-1-2", "story-3-1-3", "story-3-1-4"]

  - id: "task-3-1-1"
    type: "task"
    title: "Create GitHub API client wrapper"
    description: |
      - Build typed wrapper around @octokit/rest
      - Implement authentication handling
      - Add retry logic and rate limiting
      - Create error handling system
    parent_id: "epic-3-1"
    children_ids: []

  - id: "story-3-1-2"
    type: "story"
    title: "Implement issue hierarchy management"
    description: |
      - Convert create-sub-issue.sh to TypeScript
        Guidance: Use GitHub GraphQL API for custom issue types
      - Build parent-child relationship tracker
      - Add bulk issue creation capabilities
      - Implement issue template system
    parent_id: "epic-3-1"
    children_ids: []

  - id: "story-3-1-3"
    type: "story"
    title: "Create project board automation"
    description: |
      - Convert add-issues-to-project.sh to TypeScript
      - Add column management features
      - Implement card movement automation
      - Build progress tracking utilities
    parent_id: "epic-3-1"
    children_ids: []

  - id: "story-3-1-4"
    type: "story"
    title: "Develop PR and commit integration"
    description: |
      - Create commit message parser
      - Build automatic issue linking
      - Implement PR template generation
      - Add merge automation helpers
    parent_id: "epic-3-1"
    children_ids: []

  # Feature 3.2 - Implementation Plan to GitHub Issues Converter
  - id: "feature-3-2"
    type: "feature"
    title: "Agent_Integration_Specialist: Implementation Plan to GitHub Issues Converter"
    description: "Build system to automatically create GitHub issues from Implementation Plans."
    parent_id: "phase-3"
    children_ids: ["task-3-2-1", "task-3-2-2", "task-3-2-3", "story-3-2-4"]

  - id: "task-3-2-1"
    type: "task"
    title: "Create Implementation Plan parser"
    description: |
      - Build markdown AST parser
      - Extract hierarchy structure
      - Identify task assignments
      - Parse metadata and dependencies
    parent_id: "feature-3-2"
    children_ids: []

  - id: "task-3-2-2"
    type: "task"
    title: "Implement issue creation engine"
    description: |
      - Map plan structure to issue types
        Guidance: Use phase→project→epic→feature→task hierarchy
      - Generate issue bodies with context
      - Preserve acceptance criteria
      - Add agent assignments as issue metadata
    parent_id: "feature-3-2"
    children_ids: []

  - id: "task-3-2-3"
    type: "task"
    title: "Build synchronization system"
    description: |
      - Track created issues in plan
      - Update plan with issue numbers
      - Implement two-way sync capability
      - Add conflict resolution
    parent_id: "feature-3-2"
    children_ids: []

  - id: "story-3-2-4"
    type: "story"
    title: "Create progress tracking integration"
    description: |
      - Monitor issue state changes
      - Update plan completion status
      - Generate progress reports
      - Build burndown calculations
    parent_id: "feature-3-2"
    children_ids: []

  # Epic 3.3 - GitHub Workflow Templates
  - id: "epic-3-3"
    type: "epic"
    title: "Agent_GitHub_Automation: GitHub Workflow Templates"
    description: "Create reusable GitHub Actions and workflows for APM projects."
    parent_id: "phase-3"
    children_ids: ["task-3-3-1", "task-3-3-2", "task-3-3-3", "task-3-3-4"]

  - id: "task-3-3-1"
    type: "task"
    title: "Design APM-specific GitHub Actions"
    description: |
      - Create action for plan validation
      - Build issue creation action
      - Add progress reporting action
      - Implement handover automation
    parent_id: "epic-3-3"
    children_ids: []

  - id: "task-3-3-2"
    type: "task"
    title: "Implement CI/CD workflows"
    description: |
      - Create PR validation workflow
      - Add automated testing triggers
      - Build deployment pipelines
      - Implement security scanning
    parent_id: "epic-3-3"
    children_ids: []

  - id: "task-3-3-3"
    type: "task"
    title: "Create agent workflow helpers"
    description: |
      - Build agent context preservation
      - Add work session tracking
      - Implement automatic commits
      - Create review request automation
    parent_id: "epic-3-3"
    children_ids: []

  - id: "task-3-3-4"
    type: "task"
    title: "Package workflows for distribution"
    description: |
      - Create workflow template repository
      - Build installation scripts
      - Add configuration helpers
      - Document workflow customization
    parent_id: "epic-3-3"
    children_ids: []

  # Phase 4: CLI Development & Commands
  - id: "phase-4"
    type: "phase"
    title: "CLI Development & Commands"
    description: "Agent Group Delta (Agent_CLI_Developer, Agent_UX_Designer)"
    parent_id: null
    children_ids: ["epic-4-1", "epic-4-2", "epic-4-3", "feature-4-4"]

  # Epic 4.1 - Core CLI Architecture with Claude Code SDK
  - id: "epic-4-1"
    type: "epic"
    title: "Agent_CLI_Developer: Core CLI Architecture with Claude Code SDK"
    description: "Build comprehensive CLI using Anthropic's Claude Code SDK as foundation."
    parent_id: "phase-4"
    children_ids: ["task-4-1-1", "story-4-1-2", "task-4-1-3", "task-4-1-4"]

  - id: "task-4-1-1"
    type: "task"
    title: "Set up CLI project structure"
    description: |
      - Initialize with Claude Code SDK
      - Create command routing system
      - Implement plugin architecture
      - Add configuration management
    parent_id: "epic-4-1"
    children_ids: []

  - id: "story-4-1-2"
    type: "story"
    title: "Implement base CLI commands"
    description: |
      - Create `apm init` for project setup
      - Build `apm plan` for Implementation Plan management
      - Add `apm agent` for agent initialization
      - Implement `apm status` for project overview
    parent_id: "epic-4-1"
    children_ids: []

  - id: "task-4-1-3"
    type: "task"
    title: "Integrate with Claude Code SDK"
    description: |
      - Implement SDK query interface
      - Add subprocess command execution
      - Create MCP server integration
      - Build context management system
    parent_id: "epic-4-1"
    children_ids: []

  - id: "task-4-1-4"
    type: "task"
    title: "Create command extension system"
    description: |
      - Design plugin interface
      - Build command discovery
      - Add dynamic command loading
      - Implement command aliasing
    parent_id: "epic-4-1"
    children_ids: []

  # Epic 4.2 (Complex) - Interactive Command Workflows
  - id: "epic-4-2"
    type: "epic"
    title: "Agent_CLI_Developer & Agent_UX_Designer: Interactive Command Workflows"
    description: "Create intuitive, interactive workflows for complex APM operations."
    parent_id: "phase-4"
    children_ids: ["story-4-2-1", "task-4-2-2", "doc-4-2-3", "task-4-2-4"]
    metadata:
      complex: true
      agents: ["Agent_CLI_Developer", "Agent_UX_Designer"]

  - id: "story-4-2-1"
    type: "story"
    title: "(Agent_UX_Designer) Design command interactions"
    description: |
      - Create prompt flows for setup
      - Design agent selection interfaces
      - Build task assignment wizards
      - Add progress visualization
    parent_id: "epic-4-2"
    children_ids: []
    metadata:
      agent: "Agent_UX_Designer"

  - id: "task-4-2-2"
    type: "task"
    title: "(Agent_CLI_Developer) Implement interactive prompts"
    description: |
      - Use inquirer.js or similar for prompts
      - Build validation and error handling
      - Add context-aware suggestions
      - Implement command history
    parent_id: "epic-4-2"
    children_ids: []
    metadata:
      agent: "Agent_CLI_Developer"

  - id: "doc-4-2-3"
    type: "doc"
    title: "(Agent_UX_Designer) Create help system"
    description: |
      - Design comprehensive help screens
      - Build command examples
      - Add troubleshooting guides
      - Create quick-start tutorials
    parent_id: "epic-4-2"
    children_ids: []
    metadata:
      agent: "Agent_UX_Designer"

  - id: "task-4-2-4"
    type: "task"
    title: "(Agent_CLI_Developer) Build command output formatting"
    description: |
      - Implement table layouts
      - Add color coding system
      - Create progress indicators
      - Build export capabilities
    parent_id: "epic-4-2"
    children_ids: []
    metadata:
      agent: "Agent_CLI_Developer"

  # Epic 4.3 - Claude Command Integration
  - id: "epic-4-3"
    type: "epic"
    title: "Agent_CLI_Developer: Claude Command Integration"
    description: "Create .claude/commands/apm/ structure for Claude Code integration."
    parent_id: "phase-4"
    children_ids: ["task-4-3-1", "task-4-3-2", "task-4-3-3", "task-4-3-4"]

  - id: "task-4-3-1"
    type: "task"
    title: "Design command file structure"
    description: |
      - Create command categorization
      - Build command naming conventions
      - Add metadata system
      - Implement versioning
    parent_id: "epic-4-3"
    children_ids: []

  - id: "task-4-3-2"
    type: "task"
    title: "Generate Claude command files"
    description: |
      - Transform CLI commands to .claude format
      - Add Claude-specific metadata
      - Implement parameter mapping
      - Create command chains
    parent_id: "epic-4-3"
    children_ids: []

  - id: "task-4-3-3"
    type: "task"
    title: "Build command synchronization"
    description: |
      - Keep CLI and Claude commands in sync
      - Add bidirectional updates
      - Implement conflict resolution
      - Create validation system
    parent_id: "epic-4-3"
    children_ids: []

  - id: "task-4-3-4"
    type: "task"
    title: "Package for distribution"
    description: |
      - Create post-install generator
      - Build update mechanisms
      - Add customization options
      - Document integration patterns
    parent_id: "epic-4-3"
    children_ids: []

  # Feature 4.4 - Visual Notification System
  - id: "feature-4-4"
    type: "feature"
    title: "Agent_UX_Designer & Agent_CLI_Developer: Visual Notification System"
    description: "Implement cross-platform desktop notifications for important APM events outside the terminal."
    parent_id: "phase-4"
    children_ids: ["story-4-4-1", "task-4-4-2", "task-4-4-3", "story-4-4-4"]

  - id: "story-4-4-1"
    type: "story"
    title: "(Agent_UX_Designer) Design notification strategy"
    description: |
      - Define notification-worthy events (task completion, builds, PR reviews)
      - Create notification priority levels (info, success, warning, error)
      - Design notification templates and formatting
      - Plan user preference management
    parent_id: "feature-4-4"
    children_ids: []
    metadata:
      agent: "Agent_UX_Designer"

  - id: "task-4-4-2"
    type: "task"
    title: "(Agent_CLI_Developer) Research and integrate notification libraries"
    description: |
      - Evaluate node-notifier for cross-platform support
        Guidance: Supports Windows, macOS, Linux with fallbacks
      - Consider electron-notify for richer notifications
      - Assess notify-send compatibility on Linux
      - Choose library based on platform coverage
    parent_id: "feature-4-4"
    children_ids: []
    metadata:
      agent: "Agent_CLI_Developer"

  - id: "task-4-4-3"
    type: "task"
    title: "(Agent_CLI_Developer) Implement notification service"
    description: |
      - Create NotificationService class with queue management
      - Implement platform detection and fallbacks
      - Add notification history and logging
      - Build rate limiting to prevent spam
    parent_id: "feature-4-4"
    children_ids: []
    metadata:
      agent: "Agent_CLI_Developer"

  - id: "story-4-4-4"
    type: "story"
    title: "(Both) Create notification preferences system"
    description: |
      - Build configuration for enabled/disabled events
      - Implement do-not-disturb scheduling
      - Add sound and visual customization
      - Create CLI commands for preference management
    parent_id: "feature-4-4"
    children_ids: []
    metadata:
      agents: ["Agent_UX_Designer", "Agent_CLI_Developer"]

  # Phase 5: Session Monitoring & Agent Coordination
  - id: "phase-5"
    type: "phase"
    title: "Session Monitoring & Agent Coordination"
    description: "Agent Group Epsilon (Agent_Monitor_Lead, Agent_Analytics_Engineer, Agent_Frontend_Dev)"
    parent_id: null
    children_ids: ["epic-5-1", "epic-5-2", "epic-5-3", "feature-5-4", "feature-5-5"]

  # Epic 5.1 - Core Session Monitoring Infrastructure
  - id: "epic-5-1"
    type: "epic"
    title: "Agent_Monitor_Lead: Core Session Monitoring Infrastructure"
    description: "Build lightweight file watcher system for real-time agent session monitoring."
    parent_id: "phase-5"
    children_ids: ["task-5-1-1", "task-5-1-2", "task-5-1-3", "task-5-1-4"]

  - id: "task-5-1-1"
    type: "task"
    title: "Design session monitoring architecture"
    description: |
      - Define event types and data structures
      - Plan file watcher implementation approach
      - Design terminal title update protocol
      - Create session correlation strategy
    parent_id: "epic-5-1"
    children_ids: []

  - id: "task-5-1-2"
    type: "task"
    title: "Implement Claude log file watcher"
    description: |
      - Build TypeScript file watcher using chokidar
      - Parse JSONL log entries in real-time
      - Extract agent initialization and activity events
      - Handle log rotation and file cleanup
    parent_id: "epic-5-1"
    children_ids: []

  - id: "task-5-1-3"
    type: "task"
    title: "Create event processing pipeline"
    description: |
      - Parse conversation events for agent actions
      - Identify milestones, commits, and handoffs
      - Track task assignments and completions
      - Monitor for idle periods and blockers
    parent_id: "epic-5-1"
    children_ids: []

  - id: "task-5-1-4"
    type: "task"
    title: "Implement terminal title controller"
    description: |
      - Update terminal titles based on agent activity
      - Show current task/status in title
      - Handle multiple concurrent agents
      - Provide clear idle/active indicators
    parent_id: "epic-5-1"
    children_ids: []

  # Epic 5.2 - Session Analytics & Summary Log System
  - id: "epic-5-2"
    type: "epic"
    title: "Agent_Analytics_Engineer: Session Analytics & Summary Log System"
    description: "Extract actionable insights from agent session data and create searchable summary logs."
    parent_id: "phase-5"
    children_ids: ["task-5-2-1", "task-5-2-2", "task-5-2-3", "task-5-2-4", "story-5-2-5"]

  - id: "task-5-2-1"
    type: "task"
    title: "Build real-time conversation summarizer"
    description: |
      - Parse user and assistant messages from JSONL logs
      - Generate 1-2 sentence summaries for each exchange
      - Extract parentUuid for message reference links
      - Create timestamp-indexed summary log format
    parent_id: "epic-5-2"
    children_ids: []

  - id: "task-5-2-2"
    type: "task"
    title: "Implement summary log writer"
    description: |
      - Design summary log format (timestamp | agent | U/A | summary | commits | parentUuid)
      - Write to apm/agents/<role>/logs/summaries/YYYY-MM-DD.log
      - Track commit IDs when agents make git commits
      - Include status updates from agent responses
    parent_id: "epic-5-2"
    children_ids: []

  - id: "task-5-2-3"
    type: "task"
    title: "Create summary query interface"
    description: |
      - Build search functionality for summary logs
      - Enable date range filtering
      - Allow drill-down to full message via parentUuid
      - Support cross-agent summary aggregation
    parent_id: "epic-5-2"
    children_ids: []

  - id: "task-5-2-4"
    type: "task"
    title: "Integrate summaries with agent initialization"
    description: |
      - Load recent summaries during agent startup
      - Provide quick context recovery mechanism
      - Enable selective full-message loading
      - Optimize token usage for context building
    parent_id: "epic-5-2"
    children_ids: []

  - id: "story-5-2-5"
    type: "story"
    title: "Build session analytics from summaries"
    description: |
      - Calculate time spent per task from summaries
      - Track commit frequency and patterns
      - Generate agent performance metrics
      - Create daily/weekly team reports
    parent_id: "epic-5-2"
    children_ids: []

  # Epic 5.3 - Monitoring Dashboard (Future Enhancement)
  - id: "epic-5-3"
    type: "epic"
    title: "Agent_Frontend_Dev: Monitoring Dashboard (Future Enhancement)"
    description: "Create web dashboard for real-time multi-agent visibility."
    parent_id: "phase-5"
    children_ids: ["task-5-3-1", "task-5-3-2", "task-5-3-3", "task-5-3-4"]

  - id: "task-5-3-1"
    type: "task"
    title: "Design dashboard architecture"
    description: |
      - Plan real-time data flow
      - Design responsive UI layout
      - Create notification system
      - Plan for extensibility
    parent_id: "epic-5-3"
    children_ids: []

  - id: "task-5-3-2"
    type: "task"
    title: "Implement basic web interface"
    description: |
      - Show active agents grid
      - Display current tasks
      - Visualize progress
      - Add notification center
    parent_id: "epic-5-3"
    children_ids: []

  - id: "task-5-3-3"
    type: "task"
    title: "Add historical views"
    description: |
      - Session timeline visualization
      - Agent activity heatmaps
      - Performance trends
      - Issue correlation
    parent_id: "epic-5-3"
    children_ids: []

  - id: "task-5-3-4"
    type: "task"
    title: "Create API for integrations"
    description: |
      - RESTful endpoints for data
      - WebSocket for real-time updates
      - Authentication system
      - Rate limiting
    parent_id: "epic-5-3"
    children_ids: []

  # Feature 5.4 - Agent Response Metadata System
  - id: "feature-5-4"
    type: "feature"
    title: "Agent_Prompt_Engineer & Agent_Monitor_Lead: Agent Response Metadata System"
    description: "Enable agents to provide structured metadata in responses for enhanced monitoring."
    parent_id: "phase-5"
    children_ids: ["task-5-4-1", "task-5-4-2", "task-5-4-3", "task-5-4-4"]

  - id: "task-5-4-1"
    type: "task"
    title: "(Agent_Prompt_Engineer) Design metadata format for agent responses"
    description: |
      - Create unobtrusive HTML comment format for metadata
      - Define fields: summary, status, commits, parentUuid references
      - Design fallback for when agents forget metadata
      - Create examples for different response types
    parent_id: "feature-5-4"
    children_ids: []
    metadata:
      agent: "Agent_Prompt_Engineer"

  - id: "task-5-4-2"
    type: "task"
    title: "(Agent_Prompt_Engineer) Update agent prompts with metadata instructions"
    description: |
      - Add metadata generation to all agent init prompts
      - Create clear examples of proper formatting
      - Emphasize optional nature to prevent response degradation
      - Include in prompt engineering best practices
    parent_id: "feature-5-4"
    children_ids: []
    metadata:
      agent: "Agent_Prompt_Engineer"

  - id: "task-5-4-3"
    type: "task"
    title: "(Agent_Monitor_Lead) Implement metadata parser"
    description: |
      - Parse HTML comments from JSONL assistant messages
      - Extract structured data with error handling
      - Fall back to auto-generation when missing
      - Validate commit IDs and parentUuid formats
    parent_id: "feature-5-4"
    children_ids: []
    metadata:
      agent: "Agent_Monitor_Lead"

  - id: "task-5-4-4"
    type: "task"
    title: "(Agent_Monitor_Lead) Measure metadata quality and adherence"
    description: |
      - Track percentage of responses with metadata
      - Compare agent vs auto-generated summaries
      - Monitor metadata accuracy
      - Report on prompt adherence patterns
    parent_id: "feature-5-4"
    children_ids: []
    metadata:
      agent: "Agent_Monitor_Lead"

  # Feature 5.5 - Multi-Agent Coordination Features
  - id: "feature-5-5"
    type: "feature"
    title: "Agent_Monitor_Lead & Agent_Analytics_Engineer: Multi-Agent Coordination Features"
    description: "Enable intelligent coordination between multiple active agents using summary logs."
    parent_id: "phase-5"
    children_ids: ["story-5-5-1", "task-5-5-2", "task-5-5-3", "story-5-5-4"]

  - id: "story-5-5-1"
    type: "story"
    title: "Implement cross-agent awareness via summaries"
    description: |
      - Agents read other agents' summary logs on init
      - Detect when multiple agents work on related tasks
      - Track task dependencies across agents
      - Enable informed handoffs
    parent_id: "feature-5-5"
    children_ids: []

  - id: "task-5-5-2"
    type: "task"
    title: "Create work distribution insights"
    description: |
      - Analyze summary logs for workload patterns
      - Identify idle agents from status updates
      - Suggest optimal task assignments
      - Monitor agent specialization effectiveness
    parent_id: "feature-5-5"
    children_ids: []

  - id: "task-5-5-3"
    type: "task"
    title: "Build coordination health metrics"
    description: |
      - Track handoff success rates via summaries
      - Measure duplicate work from commit analysis
      - Monitor blocker resolution times
      - Generate team efficiency scores
    parent_id: "feature-5-5"
    children_ids: []

  - id: "story-5-5-4"
    type: "story"
    title: "Develop automated team standup from summaries"
    description: |
      - Aggregate previous day's summaries by agent
      - Group by features/tasks using commit IDs
      - Highlight blockers and dependencies
      - Generate markdown standup report
    parent_id: "feature-5-5"
    children_ids: []

  # Phase 6: Testing, Documentation & Publishing
  - id: "phase-6"
    type: "phase"
    title: "Testing, Documentation & Publishing"
    description: "Agent Group Zeta (Agent_QA_Lead, Agent_Doc_Writer, Agent_DevOps)"
    parent_id: null
    children_ids: ["epic-6-1", "epic-6-2", "epic-6-3"]

  # Epic 6.1 - End-to-End Testing with journal-ai-cli
  - id: "epic-6-1"
    type: "epic"
    title: "Agent_QA_Lead: End-to-End Testing with journal-ai-cli"
    description: "Comprehensive testing using journal-ai-cli as real-world test case."
    parent_id: "phase-6"
    children_ids: ["task-6-1-1", "task-6-1-2", "task-6-1-3", "bug-6-1-4"]

  - id: "task-6-1-1"
    type: "task"
    title: "Set up journal-ai-cli test environment"
    description: |
      - Clone journal-ai-cli repository
      - Install development version of APM
      - Configure for testing
      - Create test scenarios
    parent_id: "epic-6-1"
    children_ids: []

  - id: "task-6-1-2"
    type: "task"
    title: "Execute full APM workflow testing"
    description: |
      - Test project initialization
      - Validate Implementation Plan creation
      - Test GitHub issue generation
      - Verify agent workflows
    parent_id: "epic-6-1"
    children_ids: []

  - id: "task-6-1-3"
    type: "task"
    title: "Perform integration testing"
    description: |
      - Test CLI commands end-to-end
      - Validate GitHub integrations
      - Test prompt transformations
      - Verify build system
    parent_id: "epic-6-1"
    children_ids: []

  - id: "bug-6-1-4"
    type: "bug"
    title: "Create test report and fixes"
    description: |
      - Document all issues found
      - Prioritize fixes by severity
      - Implement corrections
      - Re-test fixed issues
    parent_id: "epic-6-1"
    children_ids: []

  # Epic 6.2 - Comprehensive Documentation
  - id: "epic-6-2"
    type: "epic"
    title: "Agent_Doc_Writer: Comprehensive Documentation"
    description: "Create full documentation suite for the enhanced APM framework."
    parent_id: "phase-6"
    children_ids: ["doc-6-2-1", "doc-6-2-2", "doc-6-2-3", "doc-6-2-4"]

  - id: "doc-6-2-1"
    type: "doc"
    title: "Write user documentation"
    description: |
      - Create getting started guide
      - Document all CLI commands
      - Write workflow tutorials
      - Add troubleshooting section
    parent_id: "epic-6-2"
    children_ids: []

  - id: "doc-6-2-2"
    type: "doc"
    title: "Create developer documentation"
    description: |
      - Document architecture decisions
      - Write plugin development guide
      - Add API references
      - Create contribution guidelines
    parent_id: "epic-6-2"
    children_ids: []

  - id: "doc-6-2-3"
    type: "doc"
    title: "Build migration documentation"
    description: |
      - Write migration guide from original APM
      - Document breaking changes
      - Create compatibility matrix
      - Add upgrade scripts
    parent_id: "epic-6-2"
    children_ids: []

  - id: "doc-6-2-4"
    type: "doc"
    title: "Generate example projects"
    description: |
      - Create starter templates
      - Build showcase examples
      - Add video tutorials
      - Create interactive demos
    parent_id: "epic-6-2"
    children_ids: []

  # Epic 6.3 (Complex) - NPM Package Publishing
  - id: "epic-6-3"
    type: "epic"
    title: "Agent_DevOps & Agent_TypeScript_Lead: NPM Package Publishing"
    description: "Prepare and publish the framework as a professional npm package."
    parent_id: "phase-6"
    children_ids: ["task-6-3-1", "task-6-3-2", "task-6-3-3", "story-6-3-4"]
    metadata:
      complex: true
      agents: ["Agent_DevOps", "Agent_TypeScript_Lead"]

  - id: "task-6-3-1"
    type: "task"
    title: "(Agent_DevOps) Finalize package configuration"
    description: |
      - Review and optimize package.json
      - Set up npm organization
      - Configure package access
      - Add security policies
    parent_id: "epic-6-3"
    children_ids: []
    metadata:
      agent: "Agent_DevOps"

  - id: "task-6-3-2"
    type: "task"
    title: "(Agent_TypeScript_Lead) Optimize build output"
    description: |
      - Minimize bundle size
      - Optimize dependencies
      - Create production builds
      - Generate source maps
    parent_id: "epic-6-3"
    children_ids: []
    metadata:
      agent: "Agent_TypeScript_Lead"

  - id: "task-6-3-3"
    type: "task"
    title: "(Agent_DevOps) Set up publishing pipeline"
    description: |
      - Create release workflow
      - Add version management
      - Implement changelog generation
      - Configure npm publishing
    parent_id: "epic-6-3"
    children_ids: []
    metadata:
      agent: "Agent_DevOps"

  - id: "story-6-3-4"
    type: "story"
    title: "(Both) Execute initial release"
    description: |
      - Run final test suite
      - Create release notes
      - Publish to npm
      - Monitor initial adoption
    parent_id: "epic-6-3"
    children_ids: []
    metadata:
      agents: ["Agent_DevOps", "Agent_TypeScript_Lead"]